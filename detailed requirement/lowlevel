# Requirements:

The calculator has the following things like 0,9,8,7,6,5,4,3,2,1,.,+,-,%,^,\*,(),=.sqrt. In any situation the calculator has to produce a correct result defined by the well known arithmetic rules. If the calculations is impossible the calculator has to display information helping.The user to resolve the erroneous situation, like:

• On encountering a division by 0 the display should read &quot;Cannot divide by 0&quot; and typing the

key &quot;C&quot; should reset the calculator.

• On calculating the square root value of a negative operand the display should read &quot;Wrong

operand&quot;.

• On erroneous operand or operation keys the display should read &quot;Reset (C) to continue&quot; or

&quot;Clear (CE) to continue&quot; as appropriate.

Of course, any situation can be cleared using the main reset key &quot;C&quot;.

Functional requirements are all the arithmetic and scientific operations whose buttons you see, as well as memory store, recall and clear. Turn on and off would also classify as functional. Non functional requirements would be a split second to deliver the answer, any slower and you&#39;d reject the calculator. It should also be scalable I. E. Be able to work with large numbers. Another important non functional requirement is that the key layout should follow the standard layout of a calculator, and the keys should be the right size and shape for usability.

## Low level Requirements:

1.The user can perform operations beyond arithimetic.

2.The user can store a value in memory for later use.

3. The user can press the &quot;EQUALS&quot; button repeatedly to repeat the previous question .

4.When the user enters an expression with more than two operands,operator precedence is applied.

5.We can do alot of operations.

6.Using high level requirements like

- Addition

-Substraction

-Multiplication

-Division

7.It can perform all the difficult fuctions.

8.We can peform activites more than one at a time.

9.We can save previous values here and perform it in the next operations.
